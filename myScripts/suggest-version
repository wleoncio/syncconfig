#!/bin/bash
# Error codes:
# 0 - success
# 1 - missing required argument (not used, docopts handles it)
# 2 - missing dependencies
version="0.1.0 licensed under GPLv3"

usage() {
  less << EOU
Usage:
  $(basename $0)

Suggest a version bump (Major, Minor, Patch) based on conventional commit
messages since the last merge.

Options:
  -h --help                         Print this help and exit
  --version                         Print version and exit

Examples:
  $(basename $0)

Send bug reports and feature requests to: https://github.com/wleoncio/syncconfig/issues
EOU
}

# Check if docopts is installed
if ! command -v docopts &> /dev/null; then
  echo "Error: docopts is not installed."
  exit 2
fi

# Setting variables
eval "$(docopts -A ARGS -h "$(usage)" -V "$version" : "$@")"

# Find the last merge commit hash
last_merge=$(git log --merges --pretty=format:"%H" -n 1)

# Get commit titles since the last merge (excluding the merge itself)
if [ -n "$last_merge" ]; then
    commits=$(git log "$last_merge"..HEAD --pretty=format:"%s")
else
    commits=$(git log --pretty=format:"%s")
fi

# Extract first word before colon from each commit title
first_words=$(echo "$commits" | sed -n 's/^\([^:]*\):.*/\1/p')

# Determine version bump
if echo "$first_words" | grep -q "^BREAKING CHANGE$"; then
    echo "Major"
elif echo "$first_words" | grep -q "^feat$"; then
    echo "Minor"
elif echo "$first_words" | grep -q "^fix$"; then
    echo "Patch"
else
    echo "No version change"
fi
