#!/bin/bash
# Syncs UiO accounts between local and Hjemmeområdet

source uio-colors.sh

version="1.0.0 licensed under GPLv3"

usage() {
  less << EOU
Usage:
  $(basename $0) COMMAND
  $(basename $0) -h | --help
  $(basename $0) --version

Arguments:
	COMMAND    Operation (push | pull)

Options:
  -h --help  Show this help message and exit
  --version  Show version and exit
EOU
}

# Check if docopts is installed
if ! command -v docopts &> /dev/null; then
  echo "${roed}Error: docopts is not installed.${reset}"
  exit 2
fi

# Setting variables
eval "$(docopts -A ARGS -h "$(usage)" -V "$version" : "$@")"
command="${ARGS['COMMAND']}"

# Config constants
configPath=$HOME/.config/uiosync.conf
if [ -f $configPath ]; then
  source $HOME/.config/uiosync.conf
else
  echo "No config file found. Please create one on "$configPath" with"
  echo "appropriate paths for "local=" and "remote=""
fi
blink="\e[5m"

reportLastSync() {
	# Report last sync on local
	echo -e "${lysblaa}Last sync on this machine:"
	echo -e "$(tail -n 1 $local/.uiosync.log)${reset}\n"
}
reportLastSync

# Determine origin and destination
hour=$(date +"%H")
if [ $command = "pull" ]; then
	from="$remote"
	to="$local"
	fromname="Hjemmeområdet"
	toname=$(hostname)
	icon=${roed}"\xE2\x86\x93"
	# Ask for confirmation if pulling in odd hours
	if [ "$hour" -gt 7 ] && [ "$hour" -lt 8 ] || [ "$hour" -gt 12 ] && [ "$hour" -lt 18 ] || [ "$hour" -gt 21 ]; then
		echo -e "\e[1;5;31mThis is an odd time to PULL!${reset}"
		read -p "Are you sure you want to PULL? (y/N) " answer
		if [ "$answer" != "y" ]; then
			echo "Aborting"
			exit 0
		fi
	fi
elif [ $command = "push" ]; then
	from="$local"
	to="$remote"
	fromname=$(hostname)
	toname="Hjemmeområdet"
	icon=${oransje}"\xE2\x86\x91"
	# Ask for confirmation if pushing in odd hours
	if [ "$hour" -lt 6 ] || [ "$hour" -gt 8 ] && [ "$hour" -lt 11 ]; then
		echo -e "\e[1;5;31mThis is an odd time to PUSH!${reset}"
		read -p "Are you sure you want to PUSH? (y/N) " answer
		if [ "$answer" != "y" ]; then
			echo "Aborting"
			exit 0
		fi
	fi
fi

# Running rsync
echo -e "Synchronizing direction: to $to (${bold}$icon${reset})"

# Checking for internet connection
connection=$(nmcli -g "STATE" general)
if [ "$connection" != "connected" ]; then
	sleep 10 # Give the computer some time to connect and try again
	connection=$(nmcli -g "STATE" general)
	if [ "$connection" != "connected" ]; then
		echo "Not connected to the internet! Cancelling in 10 seconds"
		sleep 10
		exit 1
	fi
fi

# Dry run
templog="/tmp/uiosync_files.log"
touch "$templog"
read -p "Check for file conflicts? (y/N) " -t 3 check
echo ""
if [ "$check" = "y" ]; then
  	# Check for conflicts
	echo "Checking for file conflicts. Please wait."
  eval rsync -a --verbose --dry-run --delete "$from/" "$to" > "$templog"
	dirs=$(cat "$templog" | grep "/$" | grep -v "\.git/.")
	if [ -n "$dirs" ]; then
		echo -e "\nFound changes in the following ${oransje}directories${reset}"
	  echo -e "${lysblaa}${dirs}${reset}\n"
		read -p "List changed files? (y/N) " filechange
		if [ "$filechange" = "y" ]; then
			files=$(cat "$templog" \
				| grep -v "sending incremental file list" \
				| grep -v "/$" \
				| grep -v '^sent ' \
				| grep -v '^received ' \
				| grep -v '^total size is' \
				| grep -v '^speedup is')
			# Color 'deleting' using the 'roed' color variable (use awk for reliability)
			files=$(echo "$files" | awk -v r="$roed" -v x="$lysblaa" '{if ($1=="deleting") {print $2, r "(" $1 ")" x} else {print}}')
			echo -e "\nFound changes in the following ${oransje}files${reset}"
			echo -e "${lysblaa}${files}${reset}"
		fi
	else
	  echo -e "${oransje:-\e[38;5;214m}No changes found${reset}"
	fi
else
	echo "Skipping conflict check"
fi

# Actual run
echo -e "${bold}${roed}"
printf "$icon"%.0s $(seq 1 49)
echo -e "\n$icon THIS OPERATION WILL OVERWRITE THE CONTENTS OF $icon"
spaces_needed=$((46 - ${#to}))
spaces=$(printf "%*s" "$spaces_needed")
echo -e "$icon $to$spaces$icon"
printf "%.0s$icon" $(seq 1 49)
echo -e "${reset}\e[25m\n"
read -p "Are you sure you want to continue? (y/N) " answer
if [ "$answer" = "y" ]; then

	if [ "$1" = "push" ]; then
		# Register the sync on the log file
		echo $(eval date) "from" $fromname "to" $toname >> $local"/.uiosync.log"
	fi

	# Actual sync
	eval rsync -az --info=name --delete --delete-excluded "$from/" "$to" > "$templog"
	log=$(cat "$templog" \
		| grep -v "sending incremental file list" \
		| grep -v '.uiosync.log' \
		| grep -v '/$' \
		| grep -v '/.git/[^H]')
	log=$(echo "$log" | awk -v r="$roed" -v x="$lysblaa" '{if ($1=="deleting") {print $2, r "(" $1 ")" x} else {print}}')
	echo -e "${lysblaa}$log${reset}"

	if [ "$1" = "pull" ]; then
		# Register the sync on the log file
		# This needs to be done at a different point in time from the push
		# so the log file is always updated on the local machine and doesn't
		# get overwritten by the remote version
		echo $(eval date) "from" $fromname "to" $toname >> $local"/.uiosync.log"
	fi

	# Done
	echo -e "${groenn}"
	printf "%.0s$icon" $(seq 1 16)
	echo -e "\n$icon Done "$1"ing $icon"
	printf "%.0s$icon" $(seq 1 16)
	echo -e "${reset}"
	reportLastSync
	exit 0
else
	echo "Aborting"
fi
